"""
This type stub file was generated by pyright.
"""

import tf_keras as keras

"""A Keras Layer for using TF Hub modules in TF2 format."""
version_fn = ...
if version_fn and version_fn().startswith("3."):
  ...
else:
  keras = ...
class KerasLayer(keras.layers.Layer):
  """Wraps a SavedModel (or a legacy TF1 Hub format) as a Keras Layer.

  This layer wraps a callable object for use as a Keras layer. The callable
  object can be passed directly, or be specified by a Python string with a
  handle that gets passed to `hub.load()`.

  This is the preferred API to load a TF2-style SavedModel from TF Hub
  into a Keras model. Calling this function requires TF 1.15 or newer.
  It can be called both in eager and graph mode.

  The callable object is expected to follow the conventions detailed below.
  (These are met by TF2-compatible modules loaded from TensorFlow Hub.)

  The callable is invoked with a single positional argument set to one tensor
  or a nest of tensors containing the inputs to the layer. If the callable
  accepts a `training` argument, a Python boolean is passed for it. It is True
  if this layer is marked trainable *and* called for training, analogous to
  keras.layers.BatchNormalization. (By contrast, keras.layers.Dropout
  ignores the trainable state and applies the training argument verbatim.)

  If present, the following attributes of callable are understood to have
  special meanings:
    variables: a list of all tf.Variable objects that the callable depends on.
    trainable_variables: those elements of `variables` that are reported
      as trainable variables of this Keras Layer when the layer is trainable.
    regularization_losses: a list of callables to be added as losses of this
      Keras Layer when the layer is trainable. Each one must accept zero
      arguments and return a scalar tensor.

  Note: to work-around missing shape inference functionalities from functions
  created from FunctionDefs, in rare cases one has to pass an 'output_shape'
  and potentially 'input_shape' and 'dtype'. E.g. the following is a typical
  work-around:
  ```
  hub.KerasLayer(
      "/tmp/text_embedding_model",
      output_shape=[20],  # Outputs a tensor with shape [batch_size, 20].
      input_shape=[],     # Expects a tensor of shape [batch_size] as input.
      dtype=tf.string)    # Expects a tf.string input tensor.
  ```

  Note: This layer can be used inside the model_fn of a TF2 Estimator. See the
  [migration guide]
  (https://www.tensorflow.org/beta/guide/migration_guide#using_a_custom_model_fn)
  for guidance on how to pick up trainable variables, losses and updates
  explicitly from Keras objects instead of relying on graph collections.
  This layer class does not support graph collections.
  Distributed training of the Estimator requires setting the option
  `session_config.share_cluster_devices_in_session` within the
  `tf.estimator.RunConfig`. (This option was experimental from TF1.14 to TF2.1.)

  Note: The data types used by a saved model have been fixed at saving time.
  Using keras.mixed_precision etc. has no effect on the saved model
  that gets loaded by a hub.KerasLayer.

  Attributes:
    handle: A callable object (subject to the conventions above), or a Python
      string to load a saved model via hub.load(). A string is required to save
      the Keras config of this Layer.
    trainable: Optional. A boolean controlling whether this layer is trainable.
      Must not be set to True when using a signature (raises ValueError),
      including the use of legacy TF1 Hub format.
    arguments: Optional. A dict with additional keyword arguments passed to the
      callable. These must be JSON-serializable to save the Keras config of this
      layer, and are not tracked as checkpointing dependencies of this layer.
    _sentinel: Used to prevent further positional arguments.
    tags: Optional. If set indicates which graph variant to use. For legacy
      models in TF1 Hub format leaving unset means to use the empty tags set.
    signature: Optional. If set, KerasLayer will use the requested signature.
      For legacy models in TF1 Hub format leaving unset means to use the
      `default` signature. When using a signature, either
      signature_outputs_as_dict or output_key have to set.
    signature_outputs_as_dict: If set to True, the call to this layer returns a
      dict of all the signature outputs. Can only be used if a signature is
      specified (or default signature is used for legacy models in TF1 Hub
      format).
    output_key: Name of the output item to return if the layer returns a dict.
      For legacy models in TF1 Hub format leaving unset means to return the
      `default` output.
    output_shape: A tuple or a nest of tuples with the (possibly partial) output
      shapes of the callable *without* leading batch size. This must have the
      same nesting structure as the output of the callable object and cover all
      output tensors.
    load_options: Optional, `tf.saved_model.LoadOptions` object that specifies
      options for loading when a Python string is provided as `handle`. This
      argument can only be used from TensorFlow 2.3 onwards.
    **kwargs: Forwarded to Keras' base Layer constructor.
  """
  def __init__(self, handle, trainable=..., arguments=..., _sentinel=..., tags=..., signature=..., signature_outputs_as_dict=..., output_key=..., output_shape=..., load_options=..., **kwargs) -> None:
    ...
  
  def call(self, inputs, training=...): # -> defaultdict[Any, Any] | Any | list[Any] | tuple[Any, ...] | None:
    ...
  
  def get_config(self):
    """Returns a serializable dict of keras layer configuration parameters."""
    ...
  
  @property
  def resolved_object(self): # -> AutoTrackable | None:
    """Returns the callable object to which `handle` resolved in `__init__`."""
    ...
  
  def compute_output_shape(self, input_shape): # -> TensorShape:
    """Computes the output shape of the layer.

    This relies on the `output_shape` provided during initialization, if any,
    else falls back to the default behavior from `keras.layers.Layer`.

    Args:
      input_shape: Shape tuple (tuple of integers) or list of shape tuples (one
        per output tensor of the layer). Shape tuples can include None for free
        dimensions, instead of an integer.

    Returns:
      An input shape tuple.
    """
    ...
  


def load_module(handle, tags=..., load_options=...): # -> AutoTrackable | None:
  ...

def func_has_training_argument(func): # -> bool:
  """Checks whether saved model has a `training` argument."""
  ...

