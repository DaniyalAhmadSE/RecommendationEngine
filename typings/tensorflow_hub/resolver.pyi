"""
This type stub file was generated by pyright.
"""

import abc
import enum

"""Interface and common utility methods to perform module address resolution."""
FLAGS = ...
class ModelLoadFormat(enum.Enum):
  COMPRESSED = ...
  UNCOMPRESSED = ...
  AUTO = ...


_TFHUB_CACHE_DIR = ...
_TFHUB_DOWNLOAD_PROGRESS = ...
_TFHUB_MODEL_LOAD_FORMAT = ...
_TFHUB_DISABLE_CERT_VALIDATION = ...
_TFHUB_DISABLE_CERT_VALIDATION_VALUE = ...
def get_env_setting(env_var, flag_name): # -> str | None:
  """Returns the environment variable or the specified flag."""
  ...

def tfhub_cache_dir(default_cache_dir=..., use_temp=...): # -> str | None:
  """Returns cache directory.

  Returns cache directory from either TFHUB_CACHE_DIR environment variable
  or --tfhub_cache_dir or default, if set.

  Args:
    default_cache_dir: Default cache location to use if neither TFHUB_CACHE_DIR
                       environment variable nor --tfhub_cache_dir are
                       not specified.
    use_temp: bool, Optional to enable using system's temp directory as a
              module cache directory if neither default_cache_dir nor
              --tfhub_cache_dir nor TFHUB_CACHE_DIR environment variable are
              specified .
  """
  ...

def model_load_format(): # -> str | None:
  """Returns the load mode to use."""
  ...

def create_local_module_dir(cache_dir, module_name):
  """Creates and returns the name of directory where to cache a module."""
  ...

class DownloadManager:
  """Helper class responsible for TF-Hub module download and extraction."""
  def __init__(self, url) -> None:
    """Creates DownloadManager responsible for downloading a TF-Hub module.

    Args:
       url: URL pointing to the TF-Hub module to download and extract.
    """
    ...
  
  def download_and_uncompress(self, fileobj, dst_path): # -> None:
    """Streams the content for the 'fileobj' and stores the result in dst_path.

    Args:
      fileobj: File handle pointing to .tar/.tar.gz content.
      dst_path: Absolute path where to store uncompressed data from 'fileobj'.

    Raises:
      ValueError: Unknown object encountered inside the TAR file.
    """
    ...
  


def atomic_download(handle, download_fn, module_dir, lock_file_timeout_sec=...):
  """Returns the path to a Module directory for a given TF-Hub Module handle.

  Args:
    handle: (string) Location of a TF-Hub Module.
    download_fn: Callback function that actually performs download. The callback
                 receives two arguments, handle and the location of a temporary
                 directory to download the content into.
    module_dir: Directory where to download the module files to.
    lock_file_timeout_sec: The amount of time we give the current holder of
                           the lock to make progress in downloading a module.
                           If no progress is made, the lock is revoked.

  Returns:
    A string containing the path to a TF-Hub Module directory.

  Raises:
    ValueError: if the Module is not found.
    tf.errors.OpError: file I/O failures raise the appropriate subtype.
  """
  ...

class Resolver:
  """Resolver base class: all resolvers inherit from this class."""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def __call__(self, handle): # -> None:
    """Resolves a handle into a Module path.

    Args:
      handle: (string) the Module handle to resolve.

    Returns:
      A string representing the Module path.
    """
    ...
  
  @abc.abstractmethod
  def is_supported(self, handle): # -> None:
    """Returns whether a handle is supported by this resolver.

    Args:
      handle: (string) the Module handle to resolve.

    Returns:
      True if the handle is properly formatted for this resolver.
      Note that a True return value does not indicate that the
      handle can be resolved, only that it is the correct format.
    """
    ...
  


class PathResolver(Resolver):
  """Resolves handles which are absolute paths."""
  def is_supported(self, handle): # -> Literal[True]:
    ...
  
  def __call__(self, handle):
    ...
  


class HttpResolverBase(Resolver):
  """Base class for HTTP-based resolvers."""
  def __init__(self) -> None:
    ...
  
  def is_http_protocol(self, handle):
    ...
  


