"""
This type stub file was generated by pyright.
"""

"""Replicates TensorFlow utilities which are not part of the public API."""
def read_file_to_string(filename): # -> bytes | str:
  """Returns the entire contents of a file to a string.

  Args:
    filename: string, path to a file
  """
  ...

def atomic_write_string_to_file(filename, contents, overwrite): # -> None:
  """Writes to `filename` atomically.

  This means that when `filename` appears in the filesystem, it will contain
  all of `contents`. With write_string_to_file, it is possible for the file
  to appear in the filesystem with `contents` only partially written.

  Accomplished by writing to a temp file and then renaming it.

  Args:
    filename: string, pathname for a file
    contents: string, contents that need to be written to the file
    overwrite: boolean, if false it's an error for `filename` to be occupied by
      an existing file.
  """
  ...

MAX_DIRECTORY_CREATION_ATTEMPTS = ...
def get_timestamped_export_dir(export_dir_base): # -> bytes:
  """Builds a path to a new subdirectory within the base directory.

  Each export is written into a new subdirectory named using the
  current time.  This guarantees monotonically increasing version
  numbers even across multiple runs of the pipeline.
  The timestamp used is the number of seconds since epoch UTC.

  Args:
    export_dir_base: A string containing a directory to write the exported
        graph and checkpoints.
  Returns:
    The full path of the new subdirectory (which is not actually created yet).

  Raises:
    RuntimeError: if repeated attempts fail to obtain a unique timestamped
      directory name.
  """
  ...

def get_temp_export_dir(timestamped_export_dir): # -> bytes:
  """Builds a directory name based on the argument but starting with 'temp-'.

  This relies on the fact that TensorFlow Serving ignores subdirectories of
  the base directory that can't be parsed as integers.

  Args:
    timestamped_export_dir: the name of the eventual export directory, e.g.
      /foo/bar/<timestamp>

  Returns:
    A sister directory prefixed with 'temp-', e.g. /foo/bar/temp-<timestamp>.
  """
  ...

def garbage_collect_exports(export_dir_base, exports_to_keep): # -> None:
  """Deletes older exports, retaining only a given number of the most recent.

  Export subdirectories are assumed to be named with monotonically increasing
  integers; the most recent are taken to be those with the largest values.

  Args:
    export_dir_base: the base directory under which each export is in a
      versioned subdirectory.
    exports_to_keep: Number of exports to keep. Older exports will be garbage
      collected. Set to None to disable.
  """
  ...

def bytes_to_readable_str(num_bytes, include_b=...): # -> str:
  """Generate a human-readable string representing number of bytes.

  The units B, kB, MB and GB are used.

  Args:
    num_bytes: (`int` or None) Number of bytes.
    include_b: (`bool`) Include the letter B at the end of the unit.

  Returns:
    (`str`) A string representing the number of bytes in a human-readable way,
      including a unit at the end.
  """
  ...

def absolute_path(path):
  """Returns absolute path.

  Args:
    path: Path to compute absolute path from.

  This implementation avoids calling os.path.abspath(path) if 'path' already
  represents an absolute Tensorflow filesystem location (e.g. <fs type>://).
  """
  ...

SUPPORTED_ARGUMENT_TYPES = ...
def is_composite_tensor(x): # -> bool:
  """Returns true if `x` is a CompositeTensor."""
  ...

def get_composite_tensor_type_spec(x): # -> Any | None:
  """Returns the TypeSpec for `x`, or `None` if it's not a composite tensor."""
  ...

def composite_tensor_info_to_type_spec(tensor_info):
  """Converts a `TensorInfo` for a composite tensor to a `TypeSpec` object."""
  ...

def composite_tensor_from_components(type_spec, components):
  ...

